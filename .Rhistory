group_by(type) %>%
summarize(n = n(),
mean = mean(total),
se = (sd(total)/ sqrt(n)))
poke %>%
group_by(type) %>%
summarize(n = n(),
mean = mean(total),
sd = sd(total),
se = (sd(total)/ sqrt(n)))
## t-test of power ~ legendary
t.test(total ~ legendary, poke) %>% tidy()
## t-test (default assumes unequal variance!) - boxplot first
ggplot(poke, aes(x = reorder(type, total),
y = total,
fill = legendary)) +
geom_boxplot() +
scale_fill_manual(values = c("lightgreen", "lightblue")) +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
guides(fill = guide_legend(reverse = TRUE)) +
labs(x = "Type",
y = "Power",
title = "The Distibution of Power of the Pokemon") +
theme(plot.title = element_text(hjust = 0.5))
ggplot(poke, aes(x = reorder(type, total),
y = total,
fill = legendary)) +
geom_boxplot() +
scale_fill_manual(values = c("lightgreen", "lightblue")) +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
guides(fill = guide_legend(reverse = TRUE)) +
labs(x = "Type",
y = "Power",
title = "The Distibution of Power of the Pokemon") +
theme(plot.title = element_text(hjust = 0.5))
poke %>%
filter(!(type %in% c("Fighting", "Poison", "Bug"))) %>%
nest(data = -legendary)
poke %>%
filter(!(type %in% c("Fighting", "Poison", "Bug"))) %>%
nest(data = -legendary) %>%
mutate(result = map(data, ~aov(total ~ type, .)),
tidy = map(result, tidy)) %>%
unnest(tidy) %>%
mutate(p_adj = p.adjust(p.value, method = "bonferroni")) %>% # need to adjust p-values for running multiple independent test simultaneously
filter(term == "type")
## who are these outliers?
poke %>%
filter(type %in% c("Rock", "Fire"),
total > 600,
legendary == "True")
ggplot(poke, aes(x = reorder(type, total),
y = total,
fill = legendary)) +
geom_boxplot() +
scale_fill_manual(values = c("lightgreen", "lightblue")) +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
guides(fill = guide_legend(reverse = TRUE)) +
labs(x = "Type",
y = "Power",
title = "The Distibution of Power of the Pokemon") +
theme(plot.title = element_text(hjust = 0.5))
## who are these outliers?
poke %>%
filter(type %in% c("Rock", "Fire"),
total > 600,
legendary == "True")
poke %>%
filter(!(type %in% c("Fighting", "Poison", "Bug"))) %>%
nest(data = -legendary) %>%
mutate(result = map(data, ~aov(total ~ type, .)),
tidy = map(result, tidy)) %>%
unnest(tidy) %>%
mutate(p_adj = p.adjust(p.value, method = "bonferroni")) %>% # need to adjust p-values for running multiple independent test simultaneously
filter(term == "type")
poke %>%
filter(!(type %in% c("Fighting", "Poison", "Bug"))) %>%
nest(data = -legendary) %>%
mutate(result = map(data, ~kruskal.test(total ~ type, .)),
tidy = map(result, tidy)) %>%
unnest(tidy) %>%
mutate(p_adj = p.adjust(p.value, method = "bonferroni")) %>% # need to adjust p-values for running multiple independent test simultaneously
filter(term == "type")
poke %>%
filter(!(type %in% c("Fighting", "Poison", "Bug"))) %>%
nest(data = -legendary) %>%
mutate(result = map(data, ~kruskal.test(total ~ type, .)),
tidy = map(result, tidy)) %>%
unnest(tidy) %>%
mutate(p_adj = p.adjust(p.value, method = "bonferroni"))
poke %>%
filter(!(type %in% c("Fighting", "Poison", "Bug"))) %>%
nest(data = -legendary) %>%
mutate(result = map(data, ~kruskal.test(total ~ type, .)),
tidy = map(result, tidy)) %>%
unnest(tidy) %>%
mutate(p_adj = p.adjust(p.value, method = "bonferroni"))
poke %>%
group_by(type) %>%
summarize(n = n(),
mean = mean(total),
sd = sd(total),
se = (sd(total)/ sqrt(n))) %>%
ggplot(aes(x = reorder(type, mean))) +
geom_point(aes(y = mean)) +
geom_errorbar(aes(ymin = mean - se,
ymax = mean + se)) +
theme_bw() +
labs(x = "type",
y = "mean_score")
ggplot(poke, aes(x = reorder(type, total),
y = total,
color = type)) +
geom_boxplot() +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(x = "Type",
y = "Power",
title = "Power of the Pokemon") +
theme(plot.title = element_text(hjust = 0.5)) +
theme(legend.position = "none")
ggplot(poke, aes(x = reorder(type, total),
y = total)) +
geom_boxplot(fill = "lightgreen") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(x = "Type",
y = "Power",
title = "Power of the Pokemon") +
theme(plot.title = element_text(hjust = 0.5)) +
theme(legend.position = "none")
poke %>%
filter(!(type %in% c("Fighting", "Poison", "Bug"))) %>%
nest(data = -legendary) %>%
mutate(result = map(data, ~kruskal.test(total ~ type, .)),
tidy = map(result, tidy)) %>%
unnest(tidy) %>%
mutate(p_adj = p.adjust(p.value, method = "bonferroni"))
poke %>%
group_by(type, legendary) %>%
filter(legendary == "True") %>%
summarize(n = n()) %>%
arrange(desc(n))
poke %>%
gather("key", "value", hit_point:speed) %>%
arrange(name) %>%
group_by(type, key) %>%
summarize(mean_value = mean(value),
n = n()) %>%
ggplot(aes(x = reorder(type, mean_value), y = mean_value, fill = key)) +
geom_col(position = "dodge") +
facet_wrap(~type, scale = "free_x") +
theme_bw() +
geom_text(aes(label = round(mean_value, 1)), position = position_dodge(0.9)) +
theme(axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank())
test <- another_poke %>%
nest(data = -type) %>%
mutate(anov = map(data, ~aov(value ~ key, .)),
result = map(anov, tidy)) %>%
unnest(result) %>%
mutate(p_adj = p.adjust(p.value, method = "bonferroni")) %>%
filter(term == "key") %>%
arrange(p_adj)
test$data[[18]] %>% View()
poke %>%
gather("key", "value", hit_point:speed) %>%
arrange(name) %>%
group_by(type, key) %>%
summarize(mean_value = mean(value),
n = n()) %>%
ggplot(aes(x = reorder(type, mean_value), y = mean_value, fill = key)) +
geom_col(position = "dodge") +
facet_wrap(~type, scale = "free_x") +
theme_bw() +
geom_text(aes(label = round(mean_value, 1)), position = position_dodge(0.9)) +
theme(axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank())
a <- matrix(1:9,
nrow = 3)
a
rownames(a) <- c("hi", "bye", "later")
a
colnames(a) <- c("colin", "aud", "julia")
a
a[c("colin")]
a[c("hi"), c("colin")]
a[2,4]
a[1,2]
outer(1:5, 1:5)
outer(1:5, 1:5, FUN = "paste", sep = ".")
a <- data.frame(x = 1:3, y = 3:1, z = letters[1:3])
head(a)
a[a$x == 2,]
str(a["x"])
a <- 1:5
a[NA]
a <- list(a = 1, b = 1)
a
a$a
z <- factor(c("a", "b"))
z
z[1]
z[1]
z[1, drop = FALSE)
```
z[1, drop = FALSE]
mtcars
head(mtcars)
mtcars[] <- lapply(mtcars, as.integer)
mtcars
head(mtcars)
lapply(mtcars, as.integer)
names(mtcars)
x <- c("m", "f", "u", "f", "f", "m", "m")
x
c(m = "Male", f = "Female", u = NA)
lookup <- c(m = "Male", f = "Female", u = NA)
lookup
lookup[x]
lookup
x
sample(10)
sample(10) < 4
sapply(1:10, add, 3)
a <- list(1:3, 4:9, 10:12)
a
sapply(a, +, 3)
sapply(a, add, 3)
lapply(a, add, 3) %>% unlist()
sapply(x, "[", 2)
sapply(a,  "[", 2)
f <- function(abcdef, bcde1, bcde2) {
list(a = abcdef, b1 = bcde1, b2 = bcde2)
}
str(f(1, 2, 3))
args <- list(1:10, na.rm = TRUE)
args
sapply(args, mean)
args <- list(1:10, na.rm = TRUE)
sapply(args, 2)
sapply(args, mean)
sapply(args, mean, na.rm = T)
sapply(args, mean, na.rm = TRUE)
## can also use do.call to send a list to mean
do.call(args, mean)
## can also use do.call to send a list to mean
## do call and verb first
do.call(mean, args)
## can also use do.call to send a list to mean
## do call and verb first
do.call(mean, f)
lapply(1:10, add)
adders <- lapply(1:10, add)
adders[[1]](10)
adders[[1]]
names(list(...))
f <- function(...) {
names(list(...))
}
f(a = 1, b = 2)
library(pryr)
Account <- setRefClass("Account",
fields = list(balance = "numeric"))
Account
a <- Account$new
a
a <- Account$new(balance = 100)
a$balance
set.seed(1014)
df <- data.frame(replicate(6, sample(c(1:10, -99), 6, rep = TRUE)))
df
x
fix_missing <- function(data) {
data[x == -99] <- NA
x
}
df[] <- lapply(df, fix_missing)
df
df <- data.frame(replicate(6, sample(c(1:10, -99), 6, rep = TRUE)))
df
fix_missing <- function(data) {
data[x == -99] <- NA
x
}
lapply(df, fix_missing)
poke %>%
filter(!(type %in% c("Fighting", "Poison", "Bug"))) %>%
nest(data = -legendary) %>%
mutate(result = map(data, ~kruskal.test(total ~ type, .)),
tidy = map(result, tidy)) %>%
unnest(tidy) %>%
mutate(p_adj = p.adjust(p.value, method = "bonferroni"))
## ANOVA
poke %>%
filter(!(type %in% c("Fighting", "Poison", "Bug"))) %>%
nest(data = -legendary)
## ANOVA
poke %>%
filter(!(type %in% c("Fighting", "Poison", "Bug"))) %>%
nest(data = -legendary) %>%
mutate(result = map(data, ~aov(total ~ type, .)))
## ANOVA
poke %>%
filter(!(type %in% c("Fighting", "Poison", "Bug"))) %>%
nest(data = -legendary) %>%
mutate(result = map(data, ~aov(total ~ type, .)),
TukeyHSD = map(result, ~TukeyHSD))
## ANOVA
poke %>%
filter(!(type %in% c("Fighting", "Poison", "Bug"))) %>%
nest(data = -legendary) %>%
mutate(result = map(data, ~aov(total ~ type, .)),
TukeyHSD = map(result, ~TukeyHSD),
clean_Tukey = map(TukeyHSD, tidy)) %>%
unnest(-clean_Tukey)
## ANOVA
poke %>%
filter(!(type %in% c("Fighting", "Poison", "Bug"))) %>%
nest(data = -legendary) %>%
mutate(result = map(data, ~aov(total ~ type, .)),
TukeyHSD = map(result, ~TukeyHSD))
## ANOVA
mod <- aov(total ~ type, poke)
TukeyHSD(mod)
TukeyHSD(mod) %>% head()
TukeyHSD(mod) %>%
magrittr::use_series(Scale)
TukeyHSD(mod) %>%
magrittr::use_series(type)
TukeyHSD(mod) %>%
magrittr::use_series(type) %>% head()
TukeyHSD(mod) %>%
magrittr::use_series(type) %>%
as_tibble(rownames = "Type")
TukeyHSD(mod) %>%
magrittr::use_series(type) %>%
as_tibble(rownames = "Type") +
ggplotaes(x = Type)) +
geom_errorbar(aes(ymin = lwr,
ymax = upr)) +
geom_point(aes(y = diff)) +
theme_bw() +
geom_hline(yintercept = 0)
ggplot(aes((x = Type)) +
as_tibble(rownames = "Type") %>%
TukeyHSD(mod) %>%
magrittr::use_series(type) %>%
as_tibble(rownames = "Type") %>%
ggplot(aes(x = Type)) +
geom_errorbar(aes(ymin = lwr,
ymax = upr)) +
geom_point(aes(y = diff)) +
theme_bw() +
geom_hline(yintercept = 0)
TukeyHSD(mod) %>%
magrittr::use_series(type) %>%
as_tibble(rownames = "Type") %>%
ggplot(aes(x = Type)) +
geom_errorbar(aes(ymin = lwr,
ymax = upr)) +
geom_point(aes(y = diff))
TukeyHSD(mod) %>%
magrittr::use_series(type) %>%
as_tibble(rownames = "Type") %>%
ggplot(aes(x = Type)) +
geom_errorbar(aes(ymin = lwr,
ymax = upr)) +
geom_point(aes(y = diff))
l <- replicate(20, runif(sample(1:10, 1)), simplify = FALSE)
l
# With a for loop
out <- vector("list", length(l))
out
for (i in seq_along(l)) {
out[[i]] <- length(l[[i]])
}
unlist(out)
l
l %>% unlist()
# With a for loop
out <- vector("list", length(l))
out
l
for (i in seq_along(l)) {
out[[i]] <- length(l[[i]])
}
unlist(out)
# With lapply
unlist(lapply(l, length))
a <- 1:10
a + 1
a + 10
for (i in (a)) {
a + 10
}
for (i in (a)) {
a + 10
}
for (i in a {
for (i in a) {
a + 10
}
rows <- sample(1:nrow(mtcars), rep = TRUE)
rows
mtcars[rows, ]
TukeyHSD(mod) %>%
magrittr::use_series(type) %>%
as_tibble(rownames = "Type") %>%
ggplot(aes(x = Type)) +
geom_errorbar(aes(ymin = lwr,
ymax = upr)) +
geom_point(aes(y = diff))
TukeyHSD(mod) %>%
magrittr::use_series(type) %>%
as_tibble(rownames = "Type") %>%
ggplot(aes(x = Type)) +
geom_errorbar(aes(ymin = lwr,
ymax = upr)) +
geom_point(aes(y = diff)) +
theme_bw()
replicate(5, runif(10))
replicate(5, runif(10), simplify = TRUE)
replicate(5, runif(10), simplify = FALSE)
stopifnot(length(xs) == length(xs))
vector("list", length(xs))
xs <- replicate(5, runif(10), simplify = FALSE)
vector("list", length(xs))
out[[i]] <- mean(xs[[i]])
out <- vector("list", length(xs))
for (i in seq_along(xs)) {
out[[i]] <- mean(xs[[i]])
}
return(out)
out[[i]] <- mean(xs[[i]])
for (i in seq_along(xs)) {
out[[i]] <- mean(xs[[i]])
}
out
out %>% unlist()
xs
unlist(lapply(xs, mean))
boot_df <- function(x) x[sample(nrow(x), rep = T), ]
boot_df(10)
boot_df(mtcars)
boot_df(mtcars) %>% head()
nrow(mtcars)
boot_df(mtcars) %>% nrow()
boot_df <- function(x) x[sample(nrow(x), rep = T), ]
rsquared <- function(mod) summary(mod)$r.square
boot_lm <- function(i) {
rsquared(lm(mpg ~ wt + disp, data = boot_df(mtcars)))
}
boot_lm
a <- matrix(1:20, nrow = 5)
apply(a, 1, mean)
a
a1 <- apply(a, 1, identity)
a
a1
pulse <- round(rnorm(22, 70, 10 / 3)) + rep(c(0, 5), c(10, 12))
group <- rep(c("A", "B"), c(10, 12))
pulse
group
tapply(pulse, group, length)
split(group, pulse)
split(pulse, group)
Reduce(sum, 1:3)
l <- replicate(5, sample(1:10, 15, replace = T), simplify = FALSE)
str(l)
l
df <- data.frame(x = 1:3, y = c("a", "b", "c"))
where(is.factor, df)
df <- data.frame(x = 1:3, y = c("a", "b", "c"))
where(is.factor, df)
str(Filter(is.factor, df))
str(Find(is.factor, df))
Position(is.factor, df)
Fine(is.factor, df)
Find(is.factor, df)
trans <- list(
disp = function(x) x * 0.0163871,
am = function(x) factor(x, labels = c("auto", "manual"))
)
trans
for(var in names(trans)) {
mtcars[[var]] <- trans[[var]](mtcars[[var]])
}
trans
mtcars
names(mtcars)
i <- 1
while(i <= 10) {
print(i)
i <- i + 1
}
rm_na <- function(x, y, identity) {
if (is.na(x) && is.na(y)) {
identity
} else if (is.na(x)) {
y
} else {
x
}
}
rm_na(NA, 10, 0)
library(tidyverse)
